import unittest

import sys
sys.path.append('../')

from ev_pddl.PDDL import PDDL_Parser

class TestDomain(unittest.TestCase):

    def _initialize(self):
        self.parser = PDDL_Parser()
        self.domain = self.parser.parse_domain('tests/camelot_domain.pddl')
        self.problem = self.parser.parse_problem('tests/example_problem.pddl')

    def test_dict_types(self):
        self._initialize()
        r = self.domain._get_types_for_PDDL()
        self.assertEqual(r, "\t(:types\ngeneral other \nposition item character - general\nfurniture entrypoint location - position\nplayer - character\n)\n")

    def test_to_PDDL(self):
        self._initialize()
        r = self.domain.to_PDDL()
        self.assertEqual(r, '(define (domain camelotdomain)\n\t(:requirements :typing :negative-preconditions :universal-preconditions)\n\t(:types\ngeneral other \nposition item character - general\nfurniture entrypoint location - position\nplayer - character\n)\n\t(:predicates \n\t\t(at ?g - general ?p - position)\n\t\t(in ?g - general ?l - location)\n\t\t(equip ?i - item ?c - character)\n\t\t(adjacent ?e - entrypoint ?e1 - entrypoint)\n\t\t(bleeding ?c - character)\n\t\t(spell-hit ?c - character)\n\t\t(is_open ?f - furniture)\n\t\t(alive ?c - character)\n\t\t(kneeling ?c - character)\n\t\t(can_open ?f - furniture)\n\t\t(can_close ?f - furniture)\n\t\t(has_surface ?f - furniture)\n\t\t(stored ?i - item ?f - furniture)\n\t)\n\t:(actions \n\t\t\t(:action move-between-location\n\t\t:parameters (?who - character ?from - location ?to - location ?entryfrom - entrypoint ?entryto - entrypoint )\n\t\t:precondition (and (in ?who ?from)\n(alive ?who)\n(adjacent ?entryfrom ?entryto)\n(at ?who ?entryfrom)\n)\n\t\t:effect (and (in ?who ?to)\n(not (in ?who ?from)\n)\n(not (at ?who ?entryfrom)\n)\n(at ?who ?entryto)\n)\n\t)\n\n\t\t\t(:action move-within-location\n\t\t:parameters (?who - character ?from - position ?to - position )\n\t\t:precondition (and (at ?who ?from)\n(alive ?who)\n)\n\t\t:effect (and (at ?who ?to)\n(not (at ?who ?from)\n)\n)\n\t)\n\n\t\t\t(:action attack-true-hit\n\t\t:parameters (?who - character ?whom - character ?room - position )\n\t\t:precondition (and (at ?who ?room)\n(at ?whom ?room)\n(alive ?who)\n(not (alive ?whom)\n)\n)\n\t\t:effect (and (bleeding ?whom)\n)\n\t)\n\n\t\t\t(:action attack-false-hit\n\t\t:parameters (?who - character ?whom - character ?room - position )\n\t\t:precondition (and (at ?who ?room)\n(at ?whom ?room)\n(alive ?who)\n(alive ?whom)\n)\n\t\t:effect (and )\n\t)\n\n\t\t\t(:action bash\n\t\t:parameters (?who - character ?where - position ?furniture - furniture )\n\t\t:precondition (and (at ?who ?where)\n(at ?furniture ?where)\n(alive ?who)\n)\n\t\t:effect (and )\n\t)\n\n\t\t\t(:action cast-no-target\n\t\t:parameters (?caster - character )\n\t\t:precondition (and (alive ?caster)\n)\n\t\t:effect (and )\n\t)\n\n\t\t\t(:action cast-with-target\n\t\t:parameters (?caster - character ?target - character ?position - position )\n\t\t:precondition (and (at ?caster ?position)\n(at ?target ?position)\n(alive ?caster)\n(alive ?target)\n)\n\t\t:effect (and (at ?caster ?position)\n(at ?target ?position)\n(spell-hit ?target)\n)\n\t)\n\n\t\t\t(:action clap\n\t\t:parameters (?clapper - character )\n\t\t:precondition (and (alive ?clapper)\n)\n\t\t:effect (and )\n\t)\n\n\t\t\t(:action closefurniture\n\t\t:parameters (?c - character ?f - furniture ?r - position )\n\t\t:precondition (and (at ?c ?r)\n(at ?f ?r)\n(alive ?c)\n(is_open ?f)\n)\n\t\t:effect (and (not (is_open ?f)\n)\n)\n\t)\n\n\t\t\t(:action dance\n\t\t:parameters (?dancer - character )\n\t\t:precondition (and (alive ?dancer)\n)\n\t\t:effect (and )\n\t)\n\n\t\t\t(:action dancetogether\n\t\t:parameters (?d - character ?d1 - character ?l - position )\n\t\t:precondition (and (at ?d ?l)\n(at ?d1 ?l)\n(alive ?d)\n(alive ?d1)\n)\n\t\t:effect (and )\n\t)\n\n\t\t\t(:action die\n\t\t:parameters (?c - character )\n\t\t:precondition (and (alive ?c)\n)\n\t\t:effect (and (not (alive ?c)\n)\n)\n\t)\n\n\t\t\t(:action draw\n\t\t:parameters (?c - character ?i - item ?l - position )\n\t\t:precondition (and (alive ?c)\n(at ?c ?l)\n( forall (?character - character)(not (equip ?i ?character)\n)\n)\n)\n\t\t:effect (and (equip ?i ?c)\n(not (at ?i ?l)\n)\n)\n\t)\n\n\t\t\t(:action drink\n\t\t:parameters (?c - character ?i - item ?l - position )\n\t\t:precondition (and (alive ?c)\n(at ?c ?l)\n(at ?i ?l)\n)\n\t\t:effect (and )\n\t)\n\n\t\t\t(:action enter\n\t\t:parameters (?c - character ?l - position )\n\t\t:precondition (and (alive ?c)\n(not (at ?c ?l)\n)\n)\n\t\t:effect (and (at ?c ?l)\n)\n\t)\n\n\t\t\t(:action exit\n\t\t:parameters (?c - character ?l - position )\n\t\t:precondition (and (alive ?c)\n(at ?c ?l)\n)\n\t\t:effect (and (not (at ?c ?l)\n)\n)\n\t)\n\n\t\t\t(:action give\n\t\t:parameters (?giver - character ?receiver - character ?item - item ?l - position )\n\t\t:precondition (and (alive ?giver)\n(alive ?receiver)\n(equip ?item ?giver)\n(at ?giver ?l)\n(at ?receiver ?l)\n)\n\t\t:effect (and (not (equip ?item ?giver)\n)\n(equip ?item ?receiver)\n)\n\t)\n\n\t\t\t(:action kneel\n\t\t:parameters (?character - character )\n\t\t:precondition (and (not (kneeling ?character)\n)\n(alive ?character)\n)\n\t\t:effect (and (kneeling ?character)\n)\n\t)\n\n\t\t\t(:action openfurniture\n\t\t:parameters (?character - character ?furniture - furniture ?position - position )\n\t\t:precondition (and (alive ?character)\n(at ?character ?position)\n(not (is_open ?furniture)\n)\n(can_open ?furniture)\n)\n\t\t:effect (and (is_open ?furniture)\n)\n\t)\n\n\t\t\t(:action pickup\n\t\t:parameters (?character - character ?furniture - furniture ?position - position ?item - item )\n\t\t:precondition (and (alive ?character)\n(at ?furniture ?position)\n(at ?character ?position)\n(stored ?item ?furniture)\n( forall (?characters - character)(not (equip ?item ?characters)\n)\n)\n(or (has_surface ?furniture)\n(and (can_open ?furniture)\n(is_open ?furniture)\n)\n)\n)\n\t\t:effect (and (not (stored ?item ?furniture)\n)\n(equip ?item ?character)\n)\n\t)\n\n\t\t\t(:action pocket\n\t\t:parameters ()\n\t\t:precondition (and )\n\t\t:effect (and )\n\t)\n\n\t)\n)')

if __name__ == '__main__':
    unittest.main()